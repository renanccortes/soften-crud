<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
  <persistence-unit name="soften-persistence" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
    <class>br.com.soften.entidades.Cliente</class>
    <class>br.com.soften.entidades.Login</class>
    <class>br.com.soften.entidades.PedidoVenda</class>
    <class>br.com.soften.entidades.PedidoVendaItens</class>
    <class>br.com.soften.entidades.Produto</class>
    <class>br.com.soften.entidades.TabBairros</class>
    <class>br.com.soften.entidades.TabCidades</class>
    <class>br.com.soften.entidades.TabEstados</class>
    <class>br.com.soften.entidades.TabLogradouro</class>
    <class>br.com.soften.entidades.Usuario</class>
    <class>br.com.soften.entidades.Cidades</class>
    <class>br.com.soften.entidades.Estados</class>
    <class>br.com.soften.entidades.AcaoDoUsuario</class>
    <class>br.com.soften.entidades.PermissaoDeUsuario</class>
    <exclude-unlisted-classes>true</exclude-unlisted-classes>
    <properties>
      <property name="javax.persistence.jdbc.url" value="jdbc:mysql://172.28.80.1:3306/softenbd"/>
      <property name="javax.persistence.jdbc.user" value="root"/>
      <property name="javax.persistence.jdbc.password" value="admin"/>
      <!--com.mysql.jdbc.Driver com.mysql.cj.jdbc.Driver  org.mariadb.jdbc.Driver-->
      <property name="javax.persistence.jdbc.driver" value="org.mariadb.jdbc.Driver"/>
      <property name="hibernate.case.use_query_cache" value="true"/>
      <property name="hibernate.connection.provider_class" value="org.hibernate.connection.C3P0ConnectionProvider"/>
      <!-- org.hibernate.dialect.MySQL5Dialect  org.hibernate.dialect.MySQL8Dialect-->
      <property name="hibernate.dialect" value="org.hibernate.dialect.MariaDB102Dialect"/>
      <property name="hibernate.format_sql" value="true"/>
      <property name="hibernate.show_sql" value="true"/>
      <property name="hibernate.c3p0.validate" value="false"/>
      <!--<property name="hibernate.c3p0.automaticTestTable" value="conTestTable"/>-->
      <property name="hibernate.c3p0.testConnectionOnCheckout" value="true"/>
      <property name="hibernate.connection.autoReconnect" value="true"/>
      <property name="hibernate.connection.autoReconnectForPools" value="true"/>
      <property name="hibernate.connection.autocommit" value="false"/>
      <property name="hibernate.connection.SetBigStringTryClob" value="true"/>
      <!--      determina o número de atualizações (inserções, atualizações e exclusões)
            enviadas ao banco de dados ao mesmo tempo para execução-->
      <property name="hibernate.jdbc.batch_size" value="50"/>
      <!--      define o tamanho da busca da instrução no driver JDBC, que é o número de linhas buscadas quando há mais
            de um resultado de uma linha nas instruções de seleção.-->
      <property name="hibernate.jdbc.fetch_size" value="50"/>
      <property name="hibernate.jdbc.use_streams_for_binary" value="true"/>
      <property name="hibernate.c3p0.preferredTestQuery" value="select 1;"/>
      <!--      # Determina quantas conexões por vez o c3p0 tenta adquirir quando o pool não tem
            # conexões inativas para serem usadas.-->
      <property name="hibernate.c3p0.acquire_increment" value="1"/>
      <!--      # O tamanho do cache do C3P0 para PreparedStatements. Se o valor de ambos, maxStatements
            # e maxStatementsPerConnection, é zero, o cache será desabilitado. Se
            # maxStatements é zero mas maxStatementsPerConnection é um valor diferente de
            # zero, o cache será habilitado, mas sem um limite global, apenas com um limite
            # por conexão. maxStatements controla o número total de Statements dos quais é
            # feito cache, para todas as conexões. Se setado, deve ser um valor relativamente
            # alto, já que cada Conexão do pool terá um determinado número de statements
            # colocado em cache. Como um exemplo, considere quantos PreparedStatements
            # distintos são frequentemente usados na sua aplicação e multiplique esse
            # número por maxPoolSize para chegar num valor apropriado. Apesar do parâmetro
            # maxStatements ser o padrão para o JDBC controlar o cache de statements, usuários
            # podem achar mais intuitivo o uso do parâmetro maxStatementsPerConnection.-->
      <property name="hibernate.c3p0.max_statements" value="0"/>
      <!--      # O número de PreparedStatements que o c3p0 irá colocar em cache, para cada conexão
            # do pool. Se ambos maxStatements e maxStatementsPerConnection são zero, o cache
            # de consultas ficará inativo. Se maxStatementsPerConnection é zero, mas maxStatements
            # é um valor não nulo, o cache de consultas será habilitado, e um limite global
            # imposto, mas por outro lado, não existirá nenhum limite individual por conexão.
            # Se setado, maxStatementsPerConnection deveria ser um valor, aproximado, do número
            # de PreparedStatements, distintos, que são frequentemente usados na sua aplicação
            # mais dois ou três, para que as consultas menos comuns não tirem as mais comuns
            # do cache. Apesar de maxStatements ser o parâmetro padrão em JDBC para controlar
            # o cache de consultas, o usuário pode achar mais intuitivo usar o parâmetro
            # maxStatementsPerConnection.-->
      <property name="hibernate.c3p0.maxStatementsPerConnection" value="10"/>
      <!--      # O número de milisegundos que um cliente chamando getConnection() irá esperar
            # por uma Conexão, via check-in ou uma nova conexão adquirida quando o pool estiver
            # esgotado. Zero siginifica esperar indefinidademento. Setar qualquer valor positivo
            # causará um time-out com uma SQLException depois de passada a quantidade especificada
            # de milisegundos.-->
      <property name="hibernate.c3p0.checkoutTimeout" value="5000"/>
      <!--      # Se idleConnectionTestPeriod é um número maior que zero, c3p0 irá testar todas
            # as conexões inativas, que estão no pool e não fizeram o check-out, de X em X
            # segundos, onde X é o valor de idleConnectionTestPeriod.-->
      <property name="hibernate.c3p0.idle_test_period" value="60"/>
      <!--# Número mínimo de conexões que o pool irá manter.-->
      <property name="hibernate.c3p0.min_size" value="5"/>
      <!--# Número máximo de conexões que o pool irá manter.-->
      <property name="hibernate.c3p0.max_size" value="50"/>
      <!--      # Segundos que uma Conexão será mantida no pool sem ser usada, antes de ser
            # descartada. Zero significa que a conexão nunca expira.-->
      <property name="hibernate.c3p0.timeout" value="60"/>
      <!--                   create-drop, update -->
      <property name="hibernate.hbm2ddl.auto" value="update"/>
      <!--      # c3p0 é muito assíncrono. Operações JDBC lentas geralmente são executadas por
            # helper threads que não detém travas de fechamento. Separar essas operações atravéz
            # de múltiplas threads pode melhorar significativamente a performace, permitindo
            # que várias operações sejam executadas ao mesmo tempo.-->
      <property name="hibernate.c3p0.numHelperThreads" value="3"/>
      <!--      # Número de segundos que conexões acima do limite minPoolSize deverão permanecer
            # inativas no pool antes de serem fechadas. Destinado para aplicações que desejam
            # reduzir agressivamente o número de conexões abertas, diminuindo o pool novamente
            # para minPoolSize, se, seguindo um pico, o nível de load diminui e Conexões não
            # são mais requeridas. Se maxIdleTime está definido, maxIdleTimeExcessConnections
            # deverá ser um valor menor para que o parâmetro tenho efeito. Zero significa que
            # não existirá nenhuma imposição, Conexões em excesso não serão mais fechadas.-->
      <property name="hibernate.c3p0.maxIdleTimeExcessConnections" value="30"/>
      <!--      # Segundos. Se setado, quando uma aplicação realiza o check-out e falha na realização
            # do check-in [i.e. close()] de um Conexão, dentro de período de tempo especificado,
            # o pool irá, sem cerimonias, destruir a conexão [i.e. destroy()]. Isto permite
            # que aplicações com ocasionais leaks de conexão sobrevivam, ao invéz de exaurir
            # o pool. E Isto é uma pena. Zero significa sem timeout, aplicações deveriam fechar
            # suas próprias Conexões. Obviamente, se um valor positivo é definido, este valor
            # deve ser maior que o maior valor que uma conexão deveria permanecer em uso. Caso
            # contrário, o pool irá ocasionalmente matar conexões ativas, o que é ruim. Isto
            # basicamente é uma péssima idéia, porém é uma funcionalidade pedida com frequência.
            # Consertem suas aplicações para que não vazem Conexões!!! Use esta funcionalidade
            # temporariamente em combinação com  debugUnreturnedConnectionStackTraces para
            # descobrir onde as conexões esão vazando!-->
      <property name="hibernate.c3p0.unreturnedConnectionTimeout" value="30"/>
      <!--      # Se true, e se unreturnedConnectionTimeout está definido com um valor positivo,
            # então o pool capturará a stack trace (via uma exceção) de todos os checkouts
            # de Conexões, e o stack trace será impresso quando o checkout de Conexões der
            # timeout. Este paramêtro é destinado para debug de aplicações com leak de
            # Conexões, isto é, aplicações que ocasionalmente falham na liberação/fechamento
            # de Conexões, ocasionando o crescimento do pool, e eventualmente na sua exaustão
            # (quando o pool atinge maxPoolSize com todas as suas conexões em uso e perdidas).
            # Este paramêtro deveria ser setado apenas para debugar a aplicação, já que capturar
            # o stack trace deixa mais o lento o precesso de check-out de Conexões.-->
      <property name="hibernate.c3p0.debugUnreturnedConnectionStackTraces" value="true"/>
      <!--      # Se true, um pooled DataSource declarará a si mesmo quebrado e ficará permanentemente
            # fechado caso não se consiga uma Conexão do banco depois de tentar acquireRetryAttempts
            # vezes. Se falso, o fracasso para obter uma Conexão jogará uma exceção, porém
            # o DataSource permanecerá valido, e tentará adquirir novamente, seguindo uma nova
            # chamada para getConnection().-->
      <property name="hibernate.c3p0.breakAfterAcquireFailure" value="false"/>
      <!--      # Define quantas vezes o c3p0 tentará adquirir uma nova Conexão da base de dados
            # antes de desistir. Se esse valor é menor ou igual a zero, c3p0 tentará adquirir
            # uma nova conexão indefinidamente.-->
      <property name="hibernate.c3p0.acquireRetryAttempts" value="5"/>
      <!--# Tempo em milisegundos que o c3p0 irá esperar entre tentivas de aquisição.-->
      <property name="hibernate.c3p0.acquireRetryDelay" value="5"/>
      <!--      <property name="hibernate.jdbc.use_get_generated_keys" value="true" />
            <property name="hibernate.temp.use_jdbc_metadata_defaults" value="false" />-->
      <!--<property name="javax.persistence.schema-generation.database.action" value="create"/>-->
    </properties>
  </persistence-unit>
</persistence>
